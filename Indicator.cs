using UnityEngine;

namespace InvulnerabilityIndicator {
    internal class Indicator: MonoBehaviour {
        private HeroController heroCtrl;
        private float thetaScale = 0.01f;
        private float radius = 1.5f;
        private int size;
        private LineRenderer renderer;
        private float theta = 0f;
        private float timer = 0f;

        public void Awake() {
            heroCtrl = HeroController.instance;
        }

        public void Start() {
            gameObject.AddComponent<LineRenderer>();
            renderer = GetComponent<LineRenderer>();

            Material mat = new Material(Shader.Find("Legacy Shaders/Particles/Alpha Blended Premultiply"));
            renderer.material = mat;
            renderer.startColor = Color.green;
            renderer.endColor = Color.green;
            renderer.useWorldSpace = false;
            renderer.startWidth = 0.15f;
            renderer.endWidth = 0.15f;
            renderer.enabled = false;

            createPoints();
        }

        public void Update() {
            if (heroCtrl.cState.shadowDashing ||
                heroCtrl.damageMode == GlobalEnums.DamageMode.HAZARD_ONLY ||
                heroCtrl.damageMode == GlobalEnums.DamageMode.NO_DAMAGE ||
                heroCtrl.parryInvulnTimer > 0f ||
                heroCtrl.cState.recoiling) {
                renderer.enabled = true;
                timer += Time.deltaTime;
            } else {
                renderer.enabled = false;
                timer = 0f;
            }
        }

        private void createPoints() {
            theta = 0f;
            size = (int)((1f / thetaScale) + 1f);
            renderer.positionCount = size;
            for (int i = 0; i < size; i++) {
                theta += (2.0f * Mathf.PI * thetaScale);
                float x = radius * Mathf.Cos(theta);
                float y = radius * Mathf.Sin(theta);
                renderer.SetPosition(i, new Vector3(x, y - 0.3f));
            }
        }

        public void Unload() {
            GameObject.DestroyImmediate(renderer);
        }
    }
}